ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 2.5, y = 0.14, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 58, y = 60, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 55, y = 66, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 55, y = 67, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
rcorr(as.matrix(log.genome), type="pearson")
min.model <- lm(mmax ~ 1, data=no.trnas.withSum.nolag)
biggest <- formula(lm(mmax~.,no.trnas.withSum.nolag))
biggest
fwd.model <- stepAIC(min.model, direction='forward', scope=list(lower=null, upper = full))
fwd.model <- step(min.model, direction='forward', scope=list(lower=null, upper = full))
fwd.model <- step(min.model, direction='forward', scope=list(lower=min.model, upper = biggest))
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(biggest)
biggest
plot(biggest)
outliers(biggest)
library(car)
outliers(biggest)
outlierTest(biggest)
qqPlot(biggest)
biggest
biggest.actual <- lm(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=no.trnas.withSum.nolag)
qqPlot(biggest.actual)
no.trnas.withSum.nolag
biggest.actual <- lm(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=log.genome)
qqPlot(biggest.actual)
leverageplots(log.genome)
leveragePlots(log.genome)
leveragePlots(biggest.actual)
plot.lm(biggest.actual)
plot(biggest.actual)
qqnorm(biggest.actual)
library(leaps)
summary(leaps)
summary(biggest.actual)
plot(biggest.actual="r2")
plot(biggest.actual, scale="r2")
subsets(biggest.actual, statistic="rsq")
biggest.allsubsets<-regsubsets(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=log.genome, nbest=10)
summary(biggest.allsubsets)
plot(biggest.allsubsets, scale="r2")
plot(biggest.allsubsets, scale="r2")
plot(biggest.allsubsets, scale="r2")
subsets(biggest.allsubsets, statistic="rsq")
model.select(test, sig=0.15, verbose=T)
summary(test)
stepwise(biggest, min.model, alpha.to.enter=0.05, alpha.to.leave=0.10)
par(mar=c(1,1,1,1))
biggest
min.model
biggest.actual <- lm(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=log.genome)
min.model <- lm(mmax ~ 1, data=no.trnas.withSum.nolag)
biggest <- formula(lm(mmax~.,no.trnas.withSum.nolag))
biggest
fwd.model <- step(min.model, direction='forward', scope=list(lower=min.model, upper = biggest))
lm.just.trna <- lm(mmax ~ tRNA.count)
lm.just.trna <- lm(mmax ~ tRNA.count, data=log.genome)
require(graphics)
lm.just.trna.noIntercept <- lm(mmax ~ tRNA.count - 1, data=log.genome)
anova(lm.just.trna)
summary(lm.just.trna.noIntercept)
plot(lm.just.trna, las = 1)      # Residuals, Fitted, ...
stepwise(biggest, min.model, alpha.to.enter=0.05, alpha.to.leave=0.10)
model.select(test, sig=0.15, verbose=T)
stepAIC(min.model, biggest.actual, direction='forward')
library(MASS)
stepAIC(min.model, biggest.actual, direction='forward')
step <- stepAIC(biggest.actual, direction="both")
step$anova
g <- glm(Y ~ ., data=log.genome)
g <- glm(mmax ~ ., data=log.genome)
g <- glm(mmax ~ .*., data=log.genome)
formula(g)
install.packages("bestglm")
library("bestglm")
bestglm(log.genome, IC="AIC")
log.genome
model <- lm(nmax <- Effective.Codon.Size *Genome.size..Mbp, data = log.genome)
model <- lm(nmax <- log.genome$Effective.Codon.Size *Genome.size..Mbp, data = log.genome)
model <- lm(nmax <- log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp., data = log.genome)
model <- lm(log.genome$nmax <- log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp.)
model <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size +log.genome$Genome.size..Mbp.)
drop(model)
drop(model1)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size +log.genome$Genome.size..Mbp.)
drop(model1)
anova(model1,model2)
anova(model2,model1)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size +log.genome$tRNA.count)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$tRNA.count)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$Genome.size..Mbp. *log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$Genome.size..Mbp. +log.genome$tRNA.count)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$tRNA.count)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$Effective.Codon.Size)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$Effective.Codon.Size)
anova(model2,model1)
model1 <- lm(log.genome$nmax ~ log.genome$tRNA.count *log.genome$Effective.Codon.Size)
model2 <- lm(log.genome$nmax ~ log.genome$tRNA.count +log.genome$Effective.Codon.Size)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$tRNA.count *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$tRNA.count +log.genome$Genome.size..Mbp.)
anova(model2,model1)
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$Genome.size..Mbp.)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$tRNA.count)
anova(model2,model1)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp. * rRNA.count+ tRNA.count)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp. * log.genome$rRNA.count+ log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size + log.genome$Genome.size..Mbp. + log.genome$rRNA.count+ log.genome$tRNA.count)
anova(model2,model1)
plot(model1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model1)
ggplotRegression(model2)
ggplotRegression(model1)
model1
summary(model1)
ggplotRegression(model2)
summary(model2)
model2
model1$model
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2) +
xlab("tRNA Count") +
ylab(expression(m[max])
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2) +
xlab("tRNA Count") +
ylab(expression(m[max])
model1$
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2) +
xlab("tRNA Count") +
ylab(expression(m[max])
ggplotRegression(model2)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5))) +
xlab("tRNA Count") +
ylab(expression(m[max])
}
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab("tRNA Count") +
ylab(expression(m[max]) +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab("tRNA Count") +
ylab(expression(m[max])) +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2)
install.packages(c('vegan', 'ggplot2', 'gplots', 'gtools', 'reshape', 'optparse', 'pheatmap', 'RColorBrewer', 'compute.es'))
install.packages(c("vegan", "ggplot2", "gplots", "gtools", "reshape",
install.packages("optparse")
install.packages("pheatmap")
install.packages("RColorBrewer")
install.packages("optparse")
install.packages("pheatmap")
install.packages("compute.es")
install.packages("gtools")
install.packages("reshape")
install.packages("gplots")
install.packages("vegan")
install.packages("ggplot2")
install.packages("R2WinBUGS")
choose(5, 2)
rm(list=ls())
getwd()
setwd('/Users/WRShoemaker/MURI/MURI_growth_curves/GC_dilution/')
getwd()
library(ggplot2)
ODs <- read.xlsx("GC_dilution_OD.xlsx", 1)
library(xlsx)
install.packages("xlsx")
library(xlsx)
ODs <- read.xlsx("GC_dilution_OD.xlsx", 1)
ODs <- read.xlsx("GC_dilution_OD.xlsx", sheetName = "mysheet")
ODs <- read.xlsx("GC_dilution_OD.xlsx", 1)
ODs
melted = melt(ODs, id.vars="Time")
library(reshape2)
melted = melt(ODs, id.vars="Time")
ggplot(data=melted, aes(x=time, y=value, group=variable)) + geom_line()
melted
ggplot(data=melted, aes(x=Time, y=value, group=variable)) + geom_line()
ggplot(data=melted, aes(x=Time, y=value, group=variable)) +
geom_bar(width=1)+scale_y_continuous(expand = c(0,0))+ opts(axis.text.x=theme_text(angle=90))
geom_bar(width=1)+scale_y_continuous(expand = c(0,0))+ theme(axis.text.x=theme_text(angle=90))
ggplot(data=melted, aes(x=Time, y=value, group=variable)) +
geom_bar(width=1)+scale_y_continuous(expand = c(0,0))+ theme(axis.text.x=theme_text(angle=90))
ggplot(data=melted, aes(x=Time, y=value, group=variable)) +
geom_bar(width=1)+scale_y_continuous(expand = c(0,0))+ theme(axis.text.x=element_text(angle=90))
ggplot(data=melted, aes(x=Time, y=value, group=variable, color = variable)) + geom_line() +
geom_point(size = 3) +
scale_color_manual(values = wes_palette("GrandBudapest")) +
theme_gray()
library(wesanderson)
ggplot(data=melted, aes(x=Time, y=value, group=variable, color = variable)) + geom_line() +
geom_point(size = 3) +
scale_color_manual(values = wes_palette("GrandBudapest")) +
theme_gray()
ggplot(data=melted, aes(x=Time, y=value, group=variable, color = variable)) + geom_line() +
geom_point(size = 3) +
scale_color_manual(values = wes_palette()) +
theme_gray()
P <- ggplot(data=melted, aes(x=Time, y=value, group=variable, color = variable)) + geom_line() +
geom_point(size = 3) +
theme_gray()
P1 <-p + colScale
P <- ggplot(data=melted, aes(x=Time, y=value, group=variable, color = variable)) + geom_line() +
geom_point(size = 3) +
theme_gray()
P1 <-P + colScale
myColors <- brewer.pal(24,"Set1")
names(myColors) <- levels(melted$variable)
colScale <- scale_colour_manual(name = "variable",values = myColors)
P <- ggplot(data=melted, aes(x=Time, y=value, group=variable, color = variable)) + geom_line() +
geom_point(size = 3) +
theme_gray()
P1 <-P + colScale
P1
install.packages("RColorBrewer")
library(RColorBrewer)
myColors <- brewer.pal(24,"Set1")
names(myColors) <- levels(melted$variable)
colScale <- scale_colour_manual(name = "variable",values = myColors)
P <- ggplot(data=melted, aes(x=Time, y=value, group=variable, color = variable)) + geom_line() +
geom_point(size = 3) +
theme_gray()
P1 <-P + colScale
melted$variable
melted
library(plyr)
melted$variables.C <- mapvalues(melted$variable, from = c("Bacillus_10_R1", "Bacillus_10_R2"), to = c("Bacillus_10"))
ODs <- read.xlsx("GC_dilution_OD.xlsx", 2)
df[grep("^Andy",rownames(df)),]
ODs <- read.xlsx("GC_dilution_OD.xlsx", 2)
ODs
melted <- melt(ODs, id.vars="Time")
tgc <- summarySE(melted, measurevar="value", groupvars=c("supp"))
library(Rmisc)
install.packages("Rmisc")
library(Rmisc)
tgc <- summarySE(melted, measurevar="value", groupvars=c("supp"))
ODs
melted
ODs <- read.xlsx("GC_dilution_OD.xlsx", 2)
melted <- melt(ODs, id.vars="Time")
melted
ODs <- read.xlsx("GC_dilution_OD.xlsx", 2)
melted <- melt(ODs, id.vars="Time")
melted
tgc <- summarySE(melted, measurevar="value", groupvars=c("variable"))
tgc
ggplot(tgc, aes(x=Time, y=value, colour=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
geom_line() +
geom_point()
ggplot(tgc, aes(x=Time, y=value, colour=supp)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point()
tgc <- summarySE(melted, measurevar="value", groupvars=c("variable", "Time"))
tgc
ggplot(tgc, aes(x=Time, y=value, colour=supp)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point()
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point()
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point() +
facet_wrap(~variable)
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point() +
facet_wrap(~variable) +
ylim(0, 28)
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point() +
facet_wrap(~variable) +
+ xlim(0, 7)
ylim(0, 28)
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point() +
facet_wrap(~variable) +
xlim(0, 7) +
ylim(0, 28)
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point() +
facet_wrap(~variable) +
xlim(0, 28) +
ylim(0, 7)
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point() +
facet_wrap(~variable) +
xlim(0, 28) +
ylim(0, 6)
ggplot(tgc, aes(x=Time, y=value, colour=variable)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point() +
xlim(0, 28) +
ylim(0, 6)
